// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/awslabs/fargatecli/ec2 (interfaces: Client)

// Package client is a generated GoMock package.
package client

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AuthorizeAllSecurityGroupIngress mocks base method
func (m *MockClient) AuthorizeAllSecurityGroupIngress(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeAllSecurityGroupIngress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizeAllSecurityGroupIngress indicates an expected call of AuthorizeAllSecurityGroupIngress
func (mr *MockClientMockRecorder) AuthorizeAllSecurityGroupIngress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeAllSecurityGroupIngress", reflect.TypeOf((*MockClient)(nil).AuthorizeAllSecurityGroupIngress), arg0)
}

// CreateDefaultSecurityGroup mocks base method
func (m *MockClient) CreateDefaultSecurityGroup() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaultSecurityGroup")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDefaultSecurityGroup indicates an expected call of CreateDefaultSecurityGroup
func (mr *MockClientMockRecorder) CreateDefaultSecurityGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultSecurityGroup", reflect.TypeOf((*MockClient)(nil).CreateDefaultSecurityGroup))
}

// GetDefaultSecurityGroupID mocks base method
func (m *MockClient) GetDefaultSecurityGroupID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultSecurityGroupID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultSecurityGroupID indicates an expected call of GetDefaultSecurityGroupID
func (mr *MockClientMockRecorder) GetDefaultSecurityGroupID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultSecurityGroupID", reflect.TypeOf((*MockClient)(nil).GetDefaultSecurityGroupID))
}

// GetDefaultSubnetIDs mocks base method
func (m *MockClient) GetDefaultSubnetIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultSubnetIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultSubnetIDs indicates an expected call of GetDefaultSubnetIDs
func (mr *MockClientMockRecorder) GetDefaultSubnetIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultSubnetIDs", reflect.TypeOf((*MockClient)(nil).GetDefaultSubnetIDs))
}

// GetSubnetVPCID mocks base method
func (m *MockClient) GetSubnetVPCID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetVPCID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetVPCID indicates an expected call of GetSubnetVPCID
func (mr *MockClientMockRecorder) GetSubnetVPCID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetVPCID", reflect.TypeOf((*MockClient)(nil).GetSubnetVPCID), arg0)
}

// SetDefaultSecurityGroupID mocks base method
func (m *MockClient) SetDefaultSecurityGroupID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultSecurityGroupID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefaultSecurityGroupID indicates an expected call of SetDefaultSecurityGroupID
func (mr *MockClientMockRecorder) SetDefaultSecurityGroupID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultSecurityGroupID", reflect.TypeOf((*MockClient)(nil).SetDefaultSecurityGroupID))
}
